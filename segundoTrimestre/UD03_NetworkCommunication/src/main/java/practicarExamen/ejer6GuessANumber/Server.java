package practicarExamen.ejer6GuessANumber;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.time.LocalDateTime;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * DU3 - Exercise 6 - Multi threaded client-server app - Guess a number game
 *
 * We want to create a client-server application where the client tries to guess a random number generated by the server.
 *
 * The client uses several commands to communicate with the server.
 *
 * The commands to use are the following:
 *
 * NEW. This command indicates that the client wants to start a new game. As an argument it accept the number of tries the user want to have to guess the number. Example: NEW 8
 * NUM. The client sends its guess to the server. A new game has to be created before using this command. Example: NUM 42.
 * HELP. The client asks the server for information about the game and the commands to use.
 * QUIT. The client sends the request to terminate the communication with the server.
 *
 *
 * The server sends two-digit responses to the client to inform it of its requests.
 *
 * The server responses are the following:
 *
 * 10 Number game server ready. Indicates that the server is ready to receive request from the client.
 * 11 BYE. Indicates that the communication with the client is going to be closed.
 * 15 Number game server ready. Indicates that the server is ready to begin a new game after a communication error has been detected.
 * 20 PLAY <numOp>. Indicates that the game starts and the client has numOp attemps.
 * 25 LOW <numOp>. Indicates that the client's guess is lower than the number to be guessed.
 * 35 HIGH <numOp>. Indicates that the client's guess is higher than the number to be guessed.
 * 40 INFO. Informs the client about the game.
 * 50 WIN. Indicates that the client has guessed the number exactly.
 * 70 LOSE NUM <numGuess>. Indicates that the client has no more attempts to guess the number and informs the client of the number to guess.
 * 80 ERR. The command used by the client cannot be used at this time.
 * 90 UNKNOWN. The command used by the client is incorrect.
 */

public class Server {
    private static final Integer LISTENING_PORT = 50000;
    private static final Integer MAX_PETITIONS = 20;
    private static final Integer MAX_THREADS = Runtime.getRuntime().availableProcessors() > 1 ? Runtime.getRuntime().availableProcessors()/2 : 1;

    public static void main(String[] args) {
        try(
                ServerSocket serverSocket = new ServerSocket(LISTENING_PORT, MAX_PETITIONS);
                ExecutorService threadPool = Executors.newFixedThreadPool(MAX_THREADS);
                ){
            System.out.println(String.format("Server started, listening in port %d with %d threads...",LISTENING_PORT,MAX_THREADS));
            while (true){
                try{
                    Socket requestSocket = serverSocket.accept();
                    threadPool.execute(new ClientHandler(requestSocket));
                }catch (IOException e){
                    System.out.println(LocalDateTime.now()+" Couldnt serve petition: "+ e.getMessage());
                }
            }
        }catch (IOException e){
            System.out.println("Error initiating server: "+e.getMessage());
        }
    }
}
