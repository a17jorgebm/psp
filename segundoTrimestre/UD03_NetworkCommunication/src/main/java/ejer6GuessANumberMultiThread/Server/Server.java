package ejer6GuessANumberMultiThread.Server;

import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * DU3 - Exercise 6 - Multi threaded client-server app - Guess a number game
 *
 * We want to create a client-server application where the client tries to guess a random number generated by the server.
 *
 * The client uses several commands to communicate with the server.
 *
 * The commands to use are the following:
 *
 * NEW. This command indicates that the client wants to start a new game. As an argument it accept the number of tries the user want to have to guess the number. Example: NEW 8
 * NUM. The client sends its guess to the server. A new game has to be created before using this command. Example: NUM 42.
 * HELP. The client asks the server for information about the game and the commands to use.
 * QUIT. The client sends the request to terminate the communication with the server.
 *
 *
 * The server sends two-digit responses to the client to inform it of its requests.
 *
 * The server responses are the following:
 *
 * 10 Number game server ready. Indicates that the server is ready to receive request from the client.
 * 11 BYE. Indicates that the communication with the client is going to be closed.
 * 15 Number game server ready. Indicates that the server is ready to begin a new game after a communication error has been detected.
 * 20 PLAY <numOp>. Indicates that the game starts and the client has numOp attemps.
 * 25 LOW <numOp>. Indicates that the client's guess is lower than the number to be guessed.
 * 35 HIGH <numOp>. Indicates that the client's guess is higher than the number to be guessed.
 * 40 INFO. Informs the client about the game.
 * 50 WIN. Indicates that the client has guessed the number exactly.
 * 70 LOSE NUM <numGuess>. Indicates that the client has no more attempts to guess the number and informs the client of the number to guess.
 * 80 ERR. The command used by the client cannot be used at this time.
 * 90 UNKNOWN. The command used by the client is incorrect.
 */
public class Server {
    private static final Path CONFIGURATION_FILE = Paths.get("src/main/java/config.properties");
    private static final int LISTEN_PORT = 60000;
    private static final int MAX_PARALLEL_CLIENTS = 100;
    private static final int NUMBER_OF_THREADS = Runtime.getRuntime().availableProcessors();

    public static void main(String[] args) {
        //load the properties
        Properties properties = loadProperties();
        System.setProperty("javax.net.ssl.keyStore",properties.getProperty("privateKeyFilePath"));
        System.setProperty("javax.net.ssl.keyStorePassword",properties.getProperty("privateKeyPassword"));

        //initiate the server
        SSLServerSocketFactory sslServerSocketFactory = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
        try(
                SSLServerSocket sslServerSocket = (SSLServerSocket) sslServerSocketFactory.createServerSocket(LISTEN_PORT,MAX_PARALLEL_CLIENTS);
                ExecutorService threadPool = Executors.newFixedThreadPool(NUMBER_OF_THREADS);
        ){
            System.out.println("Server initiaded, listening to petitions in port "+LISTEN_PORT+" working with "+NUMBER_OF_THREADS+" threads. Max number of parallel clients: "+MAX_PARALLEL_CLIENTS);
            //listen to petitions, new thread in the threadPool for each one
            while (true){
                try{
                    SSLSocket clientPetition = (SSLSocket) sslServerSocket.accept();
                    threadPool.execute(new ClientPetitionManager(clientPetition));
                }catch (IOException e){
                    System.out.println("Error in petition");
                }
            }
        }catch (IOException e){
            System.out.println("Error initiating the server: "+e.getMessage());
        }
    }

    private static Properties loadProperties(){
        Properties properties = new Properties();
        try(FileInputStream fileInputStream = new FileInputStream(CONFIGURATION_FILE.toFile())){
            properties.load(fileInputStream);
            return properties;
        }catch (IOException e){
            System.out.println("No ha sido posible cargar el fichero de configuraci√≥n: "+ e.getMessage());
            System.exit(1);
            return null;
        }
    }
}
